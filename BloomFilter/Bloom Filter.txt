pip install mmh3

import math
import mmh3
from bitarray import bitarray
from random import shuffle

class BloomFilter(object):
    def __init__(self, items_count, fp_prob):
        self.fp_prob = fp_prob
        self.size = self.get_size(items_count, fp_prob)
        self.hash_count = self.get_hash_count(self.size, items_count)
        self.bit_array = bitarray(self.size)
        self.bit_array.setall(0)

    def add(self, item):
        digests = []
        for i in range(self.hash_count):
            digest = mmh3.hash(item, i) % self.size
            digests.append(digest)
            self.bit_array[digest] = True

    def check(self, item):
        for i in range(self.hash_count):
            digest = mmh3.hash(item, i) % self.size
            if self.bit_array[digest] == False:
              return False
        return True

    def get_size(self, n, p):
        m = -(n * math.log(p))/(math.log(2)**2)
        return int(m)
    def get_hash_count(self, m, n):
        k = (m/n) * math.log(2)
        return int(k)
bloomf = BloomFilter(20, 0.05)
print("Size of bit array:{}".format(bloomf.size))
print("False positive probability:{}".format(bloomf.fp_prob))
print("Number of hash functions:{}".format(bloomf.hash_count))
word_present = ['abound','abounds','abundance']
word_absent = ['bluff',"cheater"]
for item in word_present:
    bloomf.add(item)
shuffle(word_present)
shuffle(word_absent)
test_words = word_present[:10] + word_absent
shuffle(test_words)
for word in test_words:
    if bloomf.check(word):
        if word in word_absent:
            print("'{}' is a false positve".format(word))
        else:
            print("'{}' is probably present".format(word))
    else:
        print("'{}' is defenitely not present".format(word))